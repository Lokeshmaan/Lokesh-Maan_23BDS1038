Q1).  Find the total revenue (price Ã— quantity) for each item, sorted from highest to lowest.
sol).
    db.sales.aggregate([
  { $group: {_id: "$item",
      totalRevenue: {$sum: { $multiply: ["$price", "$quantity"] }
      }}},
  {$sort: { totalRevenue: -1 }}
]);



2).   Calculate the total quantity sold per month in 2022.
sol).

db.sales.aggregate([
  {
    $match: { date: {
        $gte: ISODate("2022-01-01"),
        $lt: ISODate("2023-01-01")
      }}},
  {
    $group: {_id: {  year: { $year: "$date" },
        month: { $month: "$date" } },
      totalQuantity: { $sum: "$quantity" }}},
  {$sort: { _id: 1 } }]);



3).  Find all items where price is greater than 10 and size is not 'Short'.
sol).

db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
},{item:1,price:1,size:1,_id:0});


4).   Get all Cappuccino sales with quantity between 10 and 20.
sol).

db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10,$lte:20 }},
              {item:1,quantity:1,_id:0});


5).  Query to find items where the item name starts with "A".
sol).

db.sales.find({
  item: {$in: [/^A/] }},
  {item:1,_id:1});



6). Find all records that do not have the field size.
sol).

db.sales.find({
  size: { $exists: false }
});



7). List all items sold in February 2022.
sol).

db.sales.find({
  date: {
    $gte: ISODate("2022-02-01"),
    $lt: ISODate("2022-03-01")
  }},
    {item:1,date:1});  



8). Find all sales that are either "Grande" or "Tall" but not "Americanos".
sol).

db.sales.find({
  size: { $in: ["Grande", "Tall"] },
  item: { $ne: "Americanos" }},
  {item:1,size:1});


9). Find sales where the quantity is more than twice the price.
sol)

db.sales.find({
  $where: function() {
    return this.quantity > this.price * 2;
  }},
  {item:1,quantity:1,price:1});


10).  Find all sales where the price is greater than the average price of their respective size.
sol).

db.sales.aggregate([
  {$group: {
      _id: "$size",
      avgPrice: { $avg: "$price" }
    }}]);  // query one

db.sales.find({
  $or: [
    { size: "Short", price: { $gt: 5.5 } },
    { size: "Grande", price: { $gt: 16.6667 } },
    { size: "Tall", price: { $gt: 14.6667 } }
  ]
});     //query two


(sir here i am not able to use avg value of price to compare with price so i just use two queries and manually put output of 1st in second




11). Filter sales where the total revenue is even and exceeds 100.
sol).

db.sales.find({
  $where: function() {
    const totalRevenue = this.price * this.quantity;
    return (totalRevenue > 100) && (totalRevenue % 2 === 0);
  }});



11).  Find Sales Where the Day of Week Matches Quantity's Last Digit
[Filter sales where the day of the week (0=Sunday, 1=Monday, etc.) matches the last digit of quantity]
sol).

db.sales.find({
  $where: function() {
    const dayOfWeek = this.date.getDay();
    const lastDigit = this.quantity % 10;
    return dayOfWeek === lastDigit;
  }});




12). Find Sales Where the Month is Prime and Quantity is Odd
[Filter sales where the month (1-12) is a prime number (2,3,5,7,11) AND quantity is odd]
sol).


db.sales.find({
  $where: function() {
    const primeMonths = [2, 3, 5, 7, 11];
    const month = this.date.getMonth() + 1;
    return primeMonths.includes(month) && (this.quantity % 2 === 1);}},
{item:1,date:1,quantity:1});




13). Find Sales with "Suspicious Quantities" (Divisible by 5 or 7)
[Filter sales where quantity is divisible by 5 or 7]
sol).

db.sales.find({
  $where: function() {
    return this.quantity % 5 === 0 || this.quantity % 7 === 0;
  }},
    {item:1,quantity:1});
